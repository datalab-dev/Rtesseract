% !TeX root = RJwrapper.tex

\title{Rtesseract: A package for Optical Character Recognition (OCR)
  from R}

\author{by Matthew B. Espe and Duncan Temple Lang}

\maketitle

\begin{abstract}

  Here we describe \pkg{Rtesseract}, and R package that allows access
to Tesseract, an Open Source program for Optical Character Recognition
(OCR), from within R. For basic use, simple wrapper functions in
\pkg{Rtesseract} allow recovery of text from an image with a single
command. For more advanced uses, the complete TesseractBaseAPI is
accessible, allowing full customization of OCR behavior. Additional
utilities are also included, which allow plotting of results,
visualization of OCR confidences, output of multiple formats to file
(e.g., PDF, HOCR, plain text), and recovery of information about the
input image. By supporting recovery of text from images,
\pkg{Rtesseract} allows supports a complete analysis of text from
images to be conducted from within R.
  
\end{abstract}

\section{Introduction}\label{intro}

<<setup, echo=FALSE, message=FALSE, warning=FALSE>>=
library(Rtesseract)
library(knitr)
library(RAutoGenRunTime)

# Globally set output to be limited to 4 lines
knit_theme$set("print")
opts_chunk$set(out.lines = 4)
opts_chunk$set(highlight = FALSE, background = "white", prompt = TRUE,
               comment = '')


# # the default output hook
# # From https://github.com/yihui/knitr-examples
hook_output = knit_hooks$get("output")
knit_hooks$set(output = function(x, options) {
    if (!is.null(n <- options$out.lines)) {
        x = unlist(stringr::str_split(x, "\n"))
        if (length(x) > n) {
            # truncate the output
            x = c(head(x, n), "....\n")
        }
        x = paste(x, collapse = "\n")  # paste first n lines together
    }
    hook_output(x, options)
})

              

@ 

Data are rarely in a form ammeniable to data analysis, but at the
extreme data may be inaccessiable in their current form (e.g., in
images or PDF documents). As the saying goes, ``PDFs are where data go
to die.'' The PDF is the mainstay of scientific publication, yet
extracting data from PDFs is not a straightforward task, especially
from older PDF documents that are not ``text searchable.'' Ideally,
there would be a means to extract information from images or PDF
documents directly into the environment where analysis is being done
to eliminate the need for multi-software workflows. Here, we describe
a low-level and highly expandible tool to extract text and data from
images into R, an environment for statistical computing. This tool
uses Optical Character Recognition (OCR), a method to convert an image
to strings or characters that can be directly manipulated by a
program. Typically OCR is used to convert a scanned image of a text to
a digital copy, which can be of the form of simple text, a
``searchable'' PDF, structured XML, etc.. In addition to extracting
numeric data, these tools support the increasingly powerful capacity
to analyze the contents of text quantitatively (e.g., Natural Language
Processing and Digital Humanities). Lastly, these tools can be used to
efficiently (compared to human transcription) enter text from a simple
image into a computer representation.

Tesseract is a OCR engine which is both capable out-of-the-box, highly
flexible, and open source. Tesseract development began at Hewlett
Packard Laboratories Bristol and Hewlett Packard Co between 1985 to
1994 \citep{Smith2007}. It was entered into 1995 UNLV Annual Test of
OCR Accuracy, where it scored well against commercial products. Little
additional development occurred between 1995 and when the code base
was released for Open Source in 2005. Since 2005, Tesseract has been
maintained by Google and open-source developers. Tesseract depends on
Leptonica, an open source program for image manipulation, processing,
and analysis. The biggest strength of Tesseract is its flexibility and
ability to be trained, which allows users to custom tailor the OCR
engine's behavior to individual problems, such as new fonts or
languages, unusual spellings, etc. There are many commercial OCR
products, but few allow user training to custom fonts and languages
and even fewer allow user access to OCR control parameters. Tesseract,
on the other hand, is highly customizable, and allows user access to
low-level calibration parameters for fine-tuning the OCR engine for
increasing accuracy to specific problems.

The design philosophy of the \pkg{Rtesseract} package is to provide
convenience wrappers for the OCR engine in R, allowing
``out-of-the-box'' OCR capability while preserving access to the
fine-scale controls for more advanced use cases. Development of
\pkg{Rtesseract} began in Apr. 2015, and while there are other
packages which provide wrappers of the Tesseract commandline
executable \citep{Hagmann2014}, or API \citep{ooms2016}, the
\pkg{Rtesseract} package allows additional functionality and finer
control by giving full access to the TesseractBaseAPI from within
R. \pkg{Rtesseract} supports both the current release (v3.05.01) and
development versions (v4.00.alpha) of Tesseract. 

\section{Package Description}\label{desc}

\subsection{Base Functions}

The base of the package is a collection of four high-level functions,
\code{GetText}, \code{GetConfidences}, \code{GetAlternatives}, and
\code{GetBoundingBoxes}. Of these, \code{GetText}() is the simplest by
taking an image and returning a character vector of the recognized
characters/words. This is similar to the functionality of most common
OCR engines (e.g., Google Vision, PDF Pen Pro, Adobe Acrobat), as well
as the tesseract package. However, with \code{GetConfidences}, the
confidences of the OCR engine can be returned, allowing further
analysis of the results. Building on this, the alternative matches at
the character level can be returned with \code{GetAlternatives}, which
is useful for diagnosing ambiguous characters. Lastly, the spatial
locations of the bounding boxes around each character, word, or
element can be returned with \code{GetBoundingBoxes}, which can be
used for diagnostics of issues with the input image, or even allows
recovery of elements such as spaces, lines, and blocks in the input
image. Users should note that when these functions are called on an
image path, the TessearctBaseAPI is created and then destroyed with
each call. If repeated operations are needed on the same image,
creating a persistant TesseractBaseAPI object will be more efficient
(see ``Advanced Use'' below for more details).


%% Do we need to have examples of GetAlts, etc?  The default behavior
is to operate at the word level (\code{level = 3L}), but Tesseract can
also return results from the individual character level (\code{level =
4L}) or line level (\code{level = 2L}).

  
<<>>=
f = system.file("images", "OCRSample2.png", package = "Rtesseract")
GetText(f)
GetText(f, level = 4L)
GetText(f, level = 2L)
@ 

Plotting functions have been included in the
\pkg{Rtesseract} package, which allow visualization of the results of
OCR alongside and over-top the original image. \pkg{Rtesseract} allows
easy visualization of the bounding boxes drawn around lines, words, or
characters, which is a useful diagnostic for choosing the proper
pageSegMode. Additionally, \pkg{Rtesseract} allows the user to display
the confidence intervals associated with each bounding box, allowing
the user to quickly spot words or areas of the image that are with low
confidence. This is a useful feature for diagnosing issues related to
un-even image quality in the input image.


\begin{figure}
\advance\leftskip-2cm
\begin{minipage}{\dimexpr\textwidth+4cm\relax}%
\captionsetup{margin=2cm}

<<fig=TRUE, warning=FALSE, fig.height=5, echo=FALSE>>=
api = tesseract(f)

par(mfrow = c(1, 2),
    mar = c(4,2,2,1))

plot(api, border = "black")

plot(api, fillBox = TRUE)

@
\caption{An example of two different ways of plotting the bounding
  boxes from a image Recognized by \protect{\pkg{Rtesseract}}. The user can plot the
  just the bounding boxes surrounding the elements, or can fill the
  boxes by relative confidence level.}
\label{fig:boxes}
\end{minipage}
\end{figure}


\subsection{Advanced Use}

If multiple outputs are desired (e.g., bounding boxes as well as
confidences), a \code{TesseractBaseAPI} object can be created outside
the four convience functions above (\code{GetText},
\code{GetConfindences}, \code{GetAlternatives},
\code{GetBoundingBoxes}), avoiding the need to repeatedly create and
OCR the same image. The ability to retain the API object allows
increased efficiency, especially complex cases. A TesseractBaseAPI
object can be created with a call to \code{tesseract()} or
\code{Init()}, and the OCR can be run with a call to
\code{Recognize()}. Changing the input image is achieved with
\code{SetImage()}, while a sub-region of an image can be selected
using the \code{SetRectangle()} function.


<<>>=
api = tesseract(f)
GetText(api)
GetConfidences(api)
GetBoxes(api)
GetAlternatives(api)
@

Many customizable variables which allow fine control of the OCR engine
are accessible through R via the \pkg{Rtesseract} package, including
pageSegMode, pageOrientation, language, white- and black-list
characters, custom user-added patterns and words, alternative OCR
engines, etc. Full documatation of user-adjustable variables is
available at
\url{https://github.com/tesseract-ocr/tesseract/blob/master/doc/tesseract.1.asc}.
By creating TesseractBaseAPI objects, two or more APIs can be created
with differing customized variables and their results can be inspected
without the need to constaintly recreate and then destroy the
TesseractBaseAPI.

%% Expand

<<>>=
api = tesseract(f, pageSegMode = "psm_auto",
                opts = list(tessedit_char_blacklist = "o",
                            tessedit_enable_dict_correction = 1))
GetText(api)
@

Another advantage of having access to these primatives is the option to
recover spatial orientation from the image. Typically, different
elements are recognized by different PageSegModes. Using spatial information,
features on the page such as lines and columns can be recovered. We
have used this property as a means to recover data from images of data
stored in a table format (Fig. \ref{fig:spatial} for an example), or
to segment text by sections on the page.

\begin{figure}[htbp]
<<a, fig=TRUE, warning=FALSE, echo=FALSE>>=
f = system.file("images", "1990_p44.png", package = "Rtesseract")
ts = tesseract(f, pageSegMode = "psm_auto", datapath = "/home/mespe/DSI",
              opts = list(tessedit_char_whitelist = paste(LETTERS, 0:9, " .-",
                                                          collapse = "")))
Recognize(ts)

bb = GetBoxes(ts)

quantile(bb[,"right"] - bb[,"left"], probs = seq(0,1, 0.1)) 

i = bb[,"right"] - bb[,"left"] > 500
bb[i,]
m = plot(ts, fillBoxes = TRUE)
rect(m[i,"left"],m[i,"bottom"],m[i,"right"],m[i,"top"], col = "red", border = NA)
abline(v = Rtesseract:::findColumns(api = ts, ncols = 8, side = "left"))

@
\caption{An example of using the spatial information from the bounding
  boxes to find elements on the recognized image, including lines
  which separate parts of a table, and the location of columns.}
\label{fig:spatial}
\end{figure}

\subsection{Meta data}

In addition to the base functions, meta data about the OCR engine and
the input image can be retrieved using a collection of functions. The
current version of Tesseract can be returned by
\code{tesseractVersion}, while the capabilities for reading various
image formats via leptonica is provided by
\code{leptonicaImageFormates}. Information about the source image are
also accessible through R using the \code{GetInputName},
\code{getImageInfo},\code{GetImageDims}, and
\code{GetSourceResolution} functions.

The current settings for the tesseract
OCR engine are returned by \code{PrintVariables} (returns
\Sexpr{length(PrintVariables())} variables at the time of
writing). These variables can be adjusted via a call to
\code{SetVariables}. Additionally, configurations of these variable
options can be read in from a file with the function
\code{ReadConfigFile}, allowing easy saving of configurations for
sharing between computers. By default, \pkg{Rtesseract} searches the
/usr/bin/local directory for installed trained language files, but
this can be overridden. The current location where the API is
searching for language data is returned by \code{GetDataPath}. 

% Looking at and changing options
<<>>=
v = PrintVariables()
v[grep("tessedit_char", names(v))]
@ 


%% Expand this with list Duncan created

\section{Installation}

In order to use \pkg{Rtesseract}, users must first have Tesseract and
its dependency, Leptonica, installed. Tesseract is available from
\url{https://github.com/tesseract-ocr/} and Leptonica from
\url{https://github.com/DanBloomberg/leptonica}. Additionally, users
must have a trained language dataset installed. Currently, there are
pre-trained datasets for 140+ languages available from
\url{https://github.com/tesseract-ocr}. Users are also able to provide
their own trained data. For more information about training Tesseract,
please see
\url{https://github.com/tesseract-ocr/tesseract/wiki/Training-Tesseract}. \pkg{Rtesseract}
includes some functions that assist with training, including
\code{ReadBoxFile()}. Finally, \pkg{Rtesseract} can be installed from
source at \url{https://github.com/duncantl/Rtesseract}.%%Expand

\section{Advantages}

\pkg{Rtesseract} provides both easy access to basic OCR functionality
for simple use-cases as well as access to low-level control parameters
for more advanced uses. By allowing recovery of additional information
generated by Tesseract, such as confidence levels and bounding boxes,
\pkg{Rtesseract} supports novel applications of inputing data from
images into R (e.g., spatial analysis of text). Leveraging free,
open-source software allows full integration of the full work-flow of
text from images into R. \pkg{Rtesseract} works with both the current
stable release (3.05) and the alpha release (4.00alpha).

\bibliography{Rtesseract.bib}
