% !TeX root = RJwrapper.tex

\title{Rtesseract: A package for Optical Character Recognition (OCR)
  from R}

\author{by Matthew B. Espe and Duncan Temple Lang}

\maketitle

\begin{abstract}

  Here we describe the \pkg{Rtesseract} package that allows access
to Tesseract, an Open Source program for Optical Character Recognition
(OCR), from R. For basic use, simple wrapper functions in
\pkg{Rtesseract} allow recovery of text from an image with a
single command. For more advanced uses, the complete TesseractBaseAPI
is accessible, allowing full customization of OCR behavior. Additional
utilities are also included, which allow plotting of results,
visualization of OCR confidences, output of multiple formats to file
(e.g., PDF, HOCR, plain text), and recovery of information about the
input image. By supporting recovery of text from images,
\pkg{Rtesseract} allows a complete analysis to be conducted from
within R.
  
\end{abstract}

\section{Introduction}\label{intro}

<<setup, echo=FALSE, message=FALSE, warning=FALSE>>=
library(Rtesseract)
library(knitr)
library(RAutoGenRunTime)

# Globally set output to be limited to 4 lines
knit_theme$set("print")
opts_chunk$set(out.lines = 4)
opts_chunk$set(highlight = FALSE, background = "white", prompt = TRUE,
               comment = '')


# # the default output hook
# # From https://github.com/yihui/knitr-examples
hook_output = knit_hooks$get("output")
knit_hooks$set(output = function(x, options) {
    if (!is.null(n <- options$out.lines)) {
        x = unlist(stringr::str_split(x, "\n"))
        if (length(x) > n) {
            # truncate the output
            x = c(head(x, n), "....\n")
        }
        x = paste(x, collapse = "\n")  # paste first n lines together
    }
    hook_output(x, options)
})

              

@ 

Optical Character Recognition (OCR) is a means of converting an image
of text to strings or characters that can be manipulated by a
computer. Typically OCR is used to convert a scanned image of a text
to a digital copy, which can be of the form of simple text, a
``searchable'' pdf, XML, etc.. With increasingly powerful capacity for
the analysis of the contents of text (e.g., Natural Language
Processing), there is increasing demand for the ability to efficiently
(compared to human transcription) enter text from a simple image into
a computer representation.

Tesseract is a OCR engine which is both capable out-of-the-box, highly
flexible, and open source. Tesseract development began at Hewlett
Packard Laboratories Bristol and Hewlett Packard Co between 1985 to
1994 \citep{Smith2007}. It was entered into 1995 UNLV Annual Test of
OCR Accuracy, where it scored well against commercial products. Little
additional development occurred between 1995 and when the code base
was released for Open Source in 2005. Since 2005, Tesseract has been
maintained by Google and open-source developers. Tesseract depends on
Leptonica, an open source program for image manipulation, processing,
and analysis.

The biggest strength of Tesseract is its flexibility and ability to be
trained, which allows users to custom tailor the OCR engine's behavior
to individual problems, such as new fonts or languages, unusual
spellings, etc. There are many commercial OCR products, but few allow user
training to custom fonts and languages and even fewer allow user
access to OCR control parameters. Tesseract, on the other hand,
is highly customizable, and allows user access to low-level
calibration parameters for fine-tuning the OCR engine for increasing
accuracy to specific problems.

The design philosophy of the \pkg{Rtesseract}
package is to provide convenience wrappers for the OCR engine in R,
allowing ``out-of-the-box'' OCR capability while
preserving access to the fine-scale controls for more advanced use
cases. There are other packages which provide wrappers
for Tesseract for R \citep{ooms2016}, however the \pkg{Rtesseract}
package pre-dates these package and allows additional functionality and finer
control by giving access to the TesseractBaseAPI from within R.

\section{Package Description}\label{desc}

\subsection{Base Functions}

The base of the package is a collection of four high-level functions,
\code{GetText}, \code{GetConfidences}, \code{GetAlternatives}, and
\code{GetBoundingBoxes}. Of these, \code{GetText}() is the simplest by taking an
image and returning a character vector of the recognized
characters/words. This is similar to the functionality of most common
OCR engines (e.g., Google Vision, PDF Pen Pro, Adobe
Acrobat), as well as the tesseract package. However, with
\code{GetConfidences}, the confidences of the OCR engine can be returned,
allowing further analysis of the results. Building on this, the
alternative matches at the character level can be returned with
\code{GetAlternatives}, which is useful for
diagnosing ambiguous characters. Lastly, the spatial locations of the bounding boxes
around each character, word, or element can be returned with
\code{GetBoundingBoxes}, which can be used for diagnostics of issues with
the input image, or even allows recovery of elements such as spaces,
lines, and blocks in the input image.

%% Do we need to have examples of GetAlts, etc?
<<>>=
f = system.file("images", "OCRSample2.png", package = "Rtesseract")
# Default is to return words
GetText(f)
# But you can also get individual letters
GetText(f, level = 4L)
# Or lines
GetText(f, level = 2L)

@ 

Additionally, plotting functions have been included in the
\pkg{Rtesseract} package, which allow visualization of the results of
OCR alongside and over-top the original image. \pkg{Rtesseract} allows
easy visualization of the bounding boxes drawn around lines, words, or
characters, which is a useful diagnostic for choosing the proper
pageSegMode. Additionally, \pkg{Rtesseract} allows the user to display
the confidence intervals associated with each bounding box, allowing
the user to quickly spot words or areas of the image that are with low
confidence. This is a useful feature for diagnosing issues related to
un-even image quality in the input image.


\begin{figure}
\advance\leftskip-2cm
\begin{minipage}{\dimexpr\textwidth+4cm\relax}%
\captionsetup{margin=2cm}

<<fig=TRUE, warning=FALSE, fig.height=5, echo=FALSE>>=
# We can plot the results with showing the bounding boxes and associated confidences
api = tesseract(f)

par(mfrow = c(1, 2),
    mar = c(4,2,2,1))

plot(api, border = "black")

plot(api, fillBox = TRUE)

@
\caption{An example of two different ways of plotting the bounding
  boxes from a image Recognized by \protect{\pkg{Rtesseract}}. The user can plot the
  just the bounding boxes surrounding the elements, or can fill the
  boxes by relative confidence level.}
\label{fig:boxes}
\end{minipage}
\end{figure}


\subsection{Meta data}

In addition to the base functions, meta data about the OCR engine and
the input image can be retrieved using a collection of functions. The
current version of Tesseract can be returned by
\code{tesseractVersion}, while the capabilities for reading various
image formats via leptonica is provided by
\code{leptonicaImageFormates}. The current settings for the tesseract
OCR engine are returned by \code{PrintVariables} (returns
\Sexpr{length(PrintVariables())} variables at the time of
writing). These variables can be adjusted via a call to
\code{SetVariables}. Additionally, configurations of these variable
options can be read in from a file with the function
\code{ReadConfigFile}, allowing easy saving of configurations for
sharing between computers.

% Looking at and changing options
<<>>=
v = PrintVariables()
v[grep("tessedit_char", names(v))]
@ 


%% Expand this with list Duncan created

\subsection{Fine control}

If multiple outputs are desired (e.g., bounding boxes as well as
confidences), a \code{TesseractBaseAPI} object can be created outside
the four convience functions above (\code{GetText},
\code{GetConfindences}, \code{GetAlternatives},
\code{GetBoundingBoxes}), avoiding the need to repeatedly create and
OCR the same image. The ability to retain the API object allows
increased efficiency, especially complex cases.


<<>>=
# We can create an TesseractBaseAPI object that can be reused
api = tesseract(f)

GetText(api)
GetConfidences(api)
GetBoxes(api)
GetAlternatives(api)
@

Many customizable variables which allow fine control of the OCR engine
are accessible through R via the \pkg{Rtesseract} package, including
pageSegMode, pageOrientation, language, white- and black-list
characters, custom user-added patterns and words, alternative OCR
engines, etc. Full documatation of user-adjustable variables is
available at
\url{https://github.com/tesseract-ocr/tesseract/blob/master/doc/tesseract.1.asc}.
%% Expand

<<>>=
# Changing the PageSegMode and editting API variables
api = tesseract(f, pageSegMode = "psm_auto",
                opts = list(tessedit_char_blacklist = "o",
                            tessedit_enable_dict_correction = 1))

GetText(api)

@

An advantage of having access to these primatives is the option to
recover spatial orientation from the image. Using this information,
features on the page such as lines and columns can be recovered. We
have used this property as a means to recover data from images of data
stored in a table format.


\begin{figure}[htbp]
<<a, fig=TRUE, warning=FALSE>>=
f = system.file("images", "1990_p44.png", package = "Rtesseract")
ts = tesseract(f, pageSegMode = "psm_auto", datapath = "/home/mespe/DSI",
              opts = list(tessedit_char_whitelist = paste(LETTERS, 0:9, " .-",
                                                          collapse = "")))
Recognize(ts)

bb = GetBoxes(ts)

quantile(bb[,"right"] - bb[,"left"], probs = seq(0,1, 0.1)) 

i = bb[,"right"] - bb[,"left"] > 500
bb[i,]
m = plot(ts, fillBoxes = TRUE)
rect(m[i,"left"],m[i,"bottom"],m[i,"right"],m[i,"top"], col = "red", border = NA)
abline(v = Rtesseract:::findColumns(api = ts, ncols = 8, side = "left"))

@
\caption{An example of using the spatial information from the bounding
  boxes to find elements on the recognized image, including lines
  which separate parts of a table, and the location of columns.}
\label{fig:spatial}
\end{figure}


\section{Advantages}

Provides both easy access to OCR functionality and access to low-level
control parameters. Allows recovery of confidence and bounding boxes,
which allow spatial analysis of results. Spatial information can be
used to refine OCR area or recover table/structured data. 

For example, by adjusting the variables for OCR, it is possible to
recover the location of text on a page, as well as the locations of
lines. We have used this functionality to recover data from tables.

\section{Conclusions}

Free, open-source.

Allows integration of full work-flow into R. OCR, NLP, etc.

Works with both the current stable release (3.05) and the alpha
release (4.00alpha).


\section{Works Cited}

\bibliography{Rtesseract.bib}
