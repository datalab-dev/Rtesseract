\documentclass{article}
\usepackage[margin=1in]{geometry}
\usepackage{hyperref}


\title{Rtesseract: A package for Optical Character Recognition (OCR)
  from R}

\author{Matthew B. Espe \and Duncan Temple Lang}

\begin{document}

\maketitle

\begin{abstract}

\end{abstract}

\section{Introduction}\label{intro}

Brief intro to OCR, Tesseract. Introduce some applications.

Optical Character Recognition (OCR) is a means of converting an image
of text to strings or characters that can be manipulated by a
computer. Typical OCR is used to convert a scanned image of a text to
a digital copy, which can be of the form of simple text, a
``searchable'' pdf, XML, etc.. With increasingly powerful capacity for the analysis
of the contents of text, there is increasing demand for the ability
to efficiently (compared to human transcription) enter text from a simple image into a computer representation.

Tesseract is a OCR engine which is both capable out-of-the-box, highly
flexible, and open source. Tesseract development began at Hewlett
Packard Laboratories Bristol and Hewlett Packard Co between 1985 to
1994 \citep{Smith2007}. It was entered into 1995 UNLV Annual Test of OCR Accuracy, where
it scored well against commercial products. Little additional
development occurred between 1995 and when the code base was released
for Open Source in 2005. Since been maintained by Google and open-source developers.

The biggest strength of Tesseract is its flexibility and ability to be
trained. There are many commercial OCR products, but few allow user
training to custom fonts and languages. Tesseract, on the other hand,
is highly customizable, and allows user access to low-level
calibration parameters for fine-tuning the OCR engine for increasing
accuracy to specific problems. The design philosophy of the Rtesseract
package was to allow convenience wrappers for the OCR engine while
preserving access to the fine-scale controls. There are other wrappers
for Tesseract for R \citep{ooms2016}, however the Rtesseract
package pre-dates this package and allows additional functionality and finer
control by giving access to the TesseractBaseAPI from within R.

\section{Package Description}\label{desc}

\subsection{Base Functions}

The base of the package is a collection of four high-level functions,
GetText(), GetConfidences(), GetAlternatives(), and
GetBoundingBoxes(). Of these, GetText() is the simplest by taking an
image and returning a character vector of the recognized
characters/words. This is similar to the functionality of most common
OCR engines (e.g., Google Vision, PDF Pen Pro, Adobe
Acrobat), as well as the tesseract package. However, with
GetConfidences(), the confidences of the OCR engine can be returned,
allowing further analysis of the results. Building on this, the
alternative matches at the character level can be returned with
GetAlternatives(). Lastly, the spatial locations of the bounding boxes
around each character, word, or element can be returned with
GetBoundingBoxes().

Additionally, plotting functions have been included, which allow
visualization of the results of OCR alongside/over-top the original
image. Rtesseract allows easy visualization of the bounding boxes
drawn around lines, words, or characters, which is a useful diagnostic
for choosing the proper pageSegMode. Additionally, Rtesseract allows
the user to display the confidence intervals associated with each
bounding box, allowing the user to quickly spot words or areas of the
image that are with low confidence. plotting of bounding boxes and
confidence intervals, etc.

\subsection{Meta data}

In addition to the base functions, meta data about the OCR engine and
the input image can be retrieved using a collection of
functions. The current settings for the tesseract OCR engine are
returned by PrintVariables() (returns \Sexpr{length(PrintVariables())}
variables at the time of writing). These variables can be adjusted via
a call to SetVariables(). Additionally, configurations of these
variable options can be read in from a file with the function
ReadConfigFile().

%% Expand this with list Duncan created

\subsection{Fine control}

Many customizable variables which allow fine control of the 
OCR engine are accessible through R via the Rtesseract package, including
pageSegMode, pageOrientation, language, white- and black-list
characters, custom user-added patterns and words, alternative OCR
engines, etc. 

If multiple outputs are desired (e.g., bounding boxes as well as
confidences), a TesseractAPI object can be created outside the above
main functions, avoiding the need to repeatedly create and OCR the
same image. 


\section{Advantages}

Provides both easy access to OCR functionality and access to low-level
control parameters. Allows recovery of confidence and bounding boxes,
which allow spatial analysis of results. Spatial information can be
used to refine OCR area or recover table/structured data. 

For example, by adjusting the variables for OCR, it is possible to
recover the location of text on a page, as well as the locations of
lines. We have used this functionality to recover data from tables.


\section{Examples}\label{examples}

\subsection{Basic Use}

%% Do we need to have examples of GetAlts, etc?
<<>>=
library(Rtesseract)
f = system.file("images", "OCRSample2.png", package = "Rtesseract")
# Default is to return words
GetText(f)
# But you can also get individual letters
GetText(f, level = 4L)
# Or lines
GetText(f, level = 2L)

@ 


<<>>=
# We can create an TesseractBaseAPI object that can be reused
api = tesseract(f)

GetText(api)
GetConfidences(api)
GetBoxes(api)

@

<<fig = TRUE>>=
# We can plot the results with showing the bounding boxes and associated confidences
par(mfrow = c(1, 2))

plot(api)

plot(api, fillBox = TRUE)

@ 

\subsection{Advanced use}

%% Changing tesseract variables
<<>>=
api = tesseract(f, pageSegMode = "psm_auto",
                opts = list(tessedit_char_blacklist = "G",
                            tessedit_enable_dict_correction = 1))

GetText(api)

@ 

%% Example of recovering lines and columns
%%
<<>>=
f = system.file("images", "1990_p44.png", package = "Rtesseract")
ts = tesseract(f, pageSegMode = 3, datapath = "/home/mespe/DSI",
              opts = list(tessedit_char_whitelist = paste(LETTERS, 0:9, " .-",
                                                          collapse = "")))
Recognize(ts)

bb = GetBoxes(ts)

quantile(bb[,"right"] - bb[,"left"], probs = seq(0,1, 0.1)) 

i = bb[,"right"] - bb[,"left"] > 500
bb[i,]
m = plot(ts, fillBoxes = TRUE)
rect(m[i,"left"],m[i,"bottom"],m[i,"right"],m[i,"top"], col = "red", border = NA)
abline(v = quantile(bb[,c("left", "right")], probs = seq(0,1, 0.1)))
abline(v = quantile(bb[,"right"], probs = seq(0,1, 0.1)))
 
@

% Looking at and changing options
<<>>=
v = PrintVariables()
v[grep("char", names(v))]
@ 

\section{Conclusions}

Free, open-source.

Allows integration of full work-flow into R. OCR, NLP, etc.

Works with both the current stable release (3.05) and the alpha
release (4.00alpha).


%% Code chunks are just placeholders for eventual examples

\end{document}