\name{toPDF}
\alias{toPDF}
\alias{toHTML}
\alias{toHOcr}
\alias{toOSD}
\alias{toTSV}
\alias{toBoxText}
%\alias{toUNLV}
\title{Write Tesseract Results to Various Formats}
\description{
  These functions allow us to perform OCR on an image and to have the
  output written directly to a file in one of several formats.
  One of these - \code{toPDF} - identifies characters/words in the image
  and creates a searchable, selectable PDF document.
  Other formats include HTML (with markup including detailed
  information),  OSD (Orientatation and Script Detection),
  and TSV (tab separated values) with details for each element.
}
\usage{
toPDF(imgFile, outFile = removeExtension(imgFile),
        renderer = PDFRenderer(outFile, GetDataPath(api), ...),
        api = tesseract(, PSM_AUTO), ...)
toHTML(imgFile, fontInfo = TRUE, outFile = removeExtension(imgFile), 
        api = tesseract(, PSM_AUTO))
toHOcr(imgFile, fontInfo = TRUE, outFile = removeExtension(imgFile), 
        api = tesseract(, PSM_AUTO))
toTSV(imgFile, fontInfo = TRUE, outFile = removeExtension(imgFile), 
       api = tesseract(, PSM_AUTO))
toOSD(imgFile, outFile = removeExtension(imgFile), api = tesseract(, PSM_AUTO)) 
toBoxText(imgFile, outFile = removeExtension(imgFile), api = tesseract(, PSM_AUTO))
}

\arguments{
  \item{imgFile}{a character vector of length 1 giving the name of the
  image file to process with OCR}
  \item{outFile}{the name of the output file, without an extension. The
  extension is added by the function.}
  \item{api}{an object of class 
        \code{\link{TesseractBaseAPI-class}} objected created via a call
	to \code{\link{tesseract}}.
	If this is not provided, a new tesseract instance is created,
  used and discarded. 
      }
  \item{fontInfo}{a logical value which if \code{TRUE} specifies that
    information about the fonts is included in the output.}
  \item{renderer}{an object of class PDFRenderer.
        It is almost always true that this should not be
  passed by the caller. However, it is available if one wants to
  override the rendering class. Also, it is essential that the renderer
  is garbage collected so that the contents of the generated file are
  flushed to the file and it is closed.}
  \item{\dots}{additional arguments passed to \code{PDFRenderer}}
}
\details{
These work by creating a renderer object of  an appropriate C++ class
corresponding to the desired output and then calling the
\code{ProcessPages} method for the C++ tesseract object with this
renderer. The output is written to a file rather than to memory.
}
\value{
  A character vector of length 1 containing the full name of the output
  file generated by the call. This includes the extension tesseract adds
  to \code{outFile}.
}
%\references{}
\author{
Duncan Temple Lang
}

\seealso{
  \code{\link{tesseract}}, \code{\link{GetText}}
}
\examples{
f = system.file("images", "1990_p44.png", package = "Rtesseract")
try( toPDF(f, "tmp") ) # may fail if can't find pdf.ttf. Is this in tesseract  4.0's tessdata

toHTML(f, TRUE, "tmp")

o = toTSV(f, TRUE, "tmp")
d = read.table(o, header = TRUE, fill = TRUE)
names(d)
}
\keyword{IO}
\keyword{programming}

